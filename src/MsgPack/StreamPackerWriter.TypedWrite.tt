<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file=".\PackerWriter.TypedWrite.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if CORE_CLR || UNITY || NETSTANDARD1_1
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // CORE_CLR || UNITY || NETSTANDARD1_1
using System.Text;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from StreamPackerWriter.TypedWrite.tt and PackerWriter.TypedWrite.ttinclude T4Template.
	// Do not modify this file. Edit StreamPackerWriter.TypedWrite.tt and PackerWriter.TypedWrite.ttinclude instead.

	partial class StreamPackerWriter
	{
<#
	foreach ( var isAsync in new [] { false, true } )
	{
		if ( isAsync )
		{
#>
#if FEATURE_TAP

<#
		}

		foreach ( var type in scalarTypes )
		{
#>
		public override <#= isAsync ? "async Task" : "void" #> WriteBytes<#= isAsync ? "Async" : String.Empty #>( byte header, <#= type #> value<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
<#
			string bits;
			this.WriteToBits( type, "value", out bits );
#>
			this._scalarBuffer[ 0 ] = header;
<#
			this.WriteShift( type, bits, "this._scalarBuffer", i => ( i + 1 ).ToString( CultureInfo.InvariantCulture ) );
#>
			<#= isAsync ? "await " : String.Empty #>this.WriteBytes<#= isAsync ? "Async" : String.Empty #>( this._scalarBuffer, 0, sizeof( <#= type #> ) + 1<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
		}

<#
		} // foreach type
#>
		public override <#= isAsync ? "async Task" : "void" #> WriteBytes<#= isAsync ? "Async" : String.Empty #>( string value, bool allowStr8<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
			var chars = value.ToCharArray();
			var encoder = Encoding.UTF8.GetEncoder();
			<#= isAsync ? "await " : String.Empty #>this.WriteStringHeader<#= isAsync ? "Async" : String.Empty #>( encoder.GetByteCount( chars, 0, chars.Length, true ), allowStr8<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;

			var buffer = BufferManager.NewByteBuffer( value.Length );
			int charsOffset = 0;
			int remainingCharsLength = value.Length;
			
			bool isCompleted = false;
			do
			{
				int bytesUsed;
				isCompleted = encoder.EncodeString( chars, ref charsOffset, ref remainingCharsLength, buffer, 0, buffer.Length, out bytesUsed );
				<#= isAsync ? "await " : String.Empty #>this._destination.Write<#= isAsync ? "Async" : String.Empty #>( buffer, 0, bytesUsed<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
			} while ( remainingCharsLength > 0 );

#if DEBUG
			Contract.Assert( isCompleted, "Encoding is not completed!" );
#endif // DEBUG
		}
		
		private <#= isAsync ? "async Task" : "void" #> WriteStringHeader<#= isAsync ? "Async" : String.Empty #>( int bytesLength, bool allowStr8<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
			if( bytesLength < 0x20 )
			{
				<#= isAsync ? "await " : String.Empty #>this.WriteByte<#= isAsync ? "Async" : String.Empty #>( ( byte )( bytesLength | MessagePackCode.MinimumFixedRaw )<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
				return;
			}

			if ( bytesLength < 0x100 && allowStr8 )
			{
				<#= isAsync ? "await " : String.Empty #>this.WriteBytes<#= isAsync ? "Async" : String.Empty #>( MessagePackCode.Str8, ( byte )bytesLength<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
				return;
			}

			if ( bytesLength < 0x10000 )
			{
				<#= isAsync ? "await " : String.Empty #>this.WriteBytes<#= isAsync ? "Async" : String.Empty #>( MessagePackCode.Str16, ( ushort )bytesLength<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
				return;
			}

			<#= isAsync ? "await " : String.Empty #>this.WriteBytes<#= isAsync ? "Async" : String.Empty #>( MessagePackCode.Str32, unchecked(( uint )bytesLength)<#= isAsync ? ", cancellationToken" : String.Empty #> )<#= isAsync ? ".ConfigureAwait( false )" : String.Empty #>;
		}
<#

		if ( isAsync )
		{
#>
#endif // FEATURE_TAP
<#
		}
	} // foreach isAsync
#>
	}
}
<#+
private void WriteShift( string type, string variable, string buffer, Func<int, string> offsetGenerator )
{
	var bytesLength = lengthes[ type ];
	for ( var i = 0; i < bytesLength; i++ )
	{
		this.WriteShiftCore( i, bytesLength, variable, buffer, offsetGenerator );
	}
}
#>
