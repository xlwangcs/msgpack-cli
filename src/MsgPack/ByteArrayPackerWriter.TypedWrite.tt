<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file=".\PackerWriter.TypedWrite.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if CORE_CLR || UNITY || NETSTANDARD1_1
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // CORE_CLR || UNITY || NETSTANDARD1_1
using System.Text;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from ByteArrayPackerWriter.TypedWrite.tt and PackerWriter.TypedWrite.ttinclude T4Template.
	// Do not modify this file. Edit ByteArrayPackerWriter.TypedWrite.tt and PackerWriter.TypedWrite.ttinclude instead.

	partial class ByteArrayPackerWriter
	{
<#
	foreach ( var isAsync in new [] { false, true } )
	{
		if ( isAsync )
		{
#>
#if FEATURE_TAP

<#
		}

		foreach ( var type in scalarTypes )
		{
#>
		public override <#= isAsync ? "Task" : "void" #> WriteBytes<#= isAsync ? "Async" : String.Empty #>( byte header, <#= type #> value<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
<#
			if ( isAsync )
			{
#>
			this.WriteBytes( header, value );
			return TaskAugument.CompletedTask;
<#
			}
			else
			{
				string bits;
				this.WriteToBits( type, "value", out bits );
#>
			var currentBuffer = this._currentBuffer;
			var currentBufferOffset = this._currentBufferOffset;
			var currentBufferLimit = this._currentBufferLimit;
			var currentBufferIndex = this._currentBufferIndex;
			if ( !this.ShiftBufferIfNeeded( sizeof( <#= type #> ) + 1, ref currentBuffer, ref currentBufferOffset, ref currentBufferLimit, ref currentBufferIndex ) )
			{
				this.ThrowEofException( sizeof( <#= type #> ) );
			}

			currentBuffer[ currentBufferOffset ] = header;
			currentBufferOffset += 1;

			if ( currentBufferLimit - currentBufferOffset >= sizeof( <#= type #> ) )
			{
				// Fast path
<#
				var bytesLength = lengthes[ type ];
				for ( var i = 0; i < bytesLength; i++ )
				{
#>
				currentBuffer[ currentBufferOffset<#= i == 0 ? String.Empty : ( " + " + i.ToString( CultureInfo.InvariantCulture ) ) #> ] = unchecked( ( byte )( <#= bits #> >> ( ( sizeof( <#= type #> ) - <#= ( i + 1 ).ToString( CultureInfo.InvariantCulture ) #> ) * 8 ) & 0xFF ) );
<#
				}
#>
				currentBufferOffset += sizeof( <#= type #> );
			}
			else
			{
				this.WriteBytesSlow( <#= bits #>, ref currentBufferIndex, ref currentBuffer, ref currentBufferOffset, ref currentBufferLimit );
			}

			this._currentBufferIndex = currentBufferIndex;
			this._currentBuffer = currentBuffer;
			this._currentBufferOffset = currentBufferOffset;
			this._currentBufferLimit = currentBufferLimit;
<#
			} // if isAsync 
#>
		}

<#
			if ( !isAsync )
			{
#>
		private void WriteBytesSlow( <#= this.ToBitsType( type ) #> value, ref int currentBufferIndex, ref byte[] currentBuffer, ref int currentBufferOffset, ref int currentBufferLimit )
		{			
			if ( !this.ShiftBufferIfNeeded( sizeof( <#= type #> ), ref currentBuffer, ref currentBufferOffset, ref currentBufferLimit, ref currentBufferIndex ) )
			{
				this.ThrowEofException( sizeof( <#= type #> ) );
			}

			var bufferRemaining = currentBufferLimit - currentBufferOffset;

			for ( var totalWritten = 0; totalWritten < sizeof( <#= type #> ); )
			{
				var currentWritten = 0;
				for ( ; currentWritten < bufferRemaining && totalWritten < sizeof( <#= type #> ); currentWritten++, totalWritten++ )
				{
					currentBuffer[ currentBufferOffset + currentWritten ] = unchecked( ( byte )( value >> ( ( sizeof( <#= type #> ) - totalWritten - 1 ) * 8 ) & 0xFF ) );
				}

				currentBufferOffset += currentWritten;
			
				if ( !this.ShiftBufferIfNeeded( sizeof( <#= type #> ) - totalWritten, ref currentBuffer, ref currentBufferOffset, ref currentBufferLimit, ref currentBufferIndex ) )
				{
					this.ThrowEofException( sizeof( <#= type #> ) );
				}

				bufferRemaining = currentBufferLimit - currentBufferOffset;
			}
		}

<#
			} // if !isAsync
		} // foreach type
#>
		public override <#= isAsync ? "Task" : "void" #> WriteBytes<#= isAsync ? "Async" : String.Empty #>( string value, bool allowStr8<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
<#
			if ( isAsync )
			{
#>
			this.WriteBytes( value, allowStr8 );
			return TaskAugument.CompletedTask;
<#
			}
			else
			{
#>
			var encodedLength = Encoding.UTF8.GetByteCount( value );
			this.WriteStringHeader( encodedLength, allowStr8 );
			if ( encodedLength == 0 )
			{
				return;
			}

			if ( encodedLength <= this._currentBufferLimit - this._currentBufferOffset )
			{
				// Fast path
				Encoding.UTF8.GetBytes( value, 0, value.Length, this._currentBuffer, this._currentBufferOffset );
				this._currentBufferOffset += encodedLength;
			}
			else
			{
				this.WriteStringBody( value );
			}
<#
			} // if isAsync
#>
		}

<#

		if ( isAsync )
		{
#>
#endif // FEATURE_TAP
<#
		}
	} // foreach isAsync
#>
		private void WriteStringHeader( int bytesLength, bool allowStr8 )
		{
			if( bytesLength < 0x20 )
			{
				this.WriteByte( ( byte )( bytesLength | MessagePackCode.MinimumFixedRaw ) );
				return;
			}

			if ( bytesLength < 0x100 && allowStr8 )
			{
				this.WriteBytes( MessagePackCode.Str8, ( byte )bytesLength );
				return;
			}

			if ( bytesLength < 0x10000 )
			{
				this.WriteBytes( MessagePackCode.Str16, ( ushort )bytesLength );
				return;
			}

			this.WriteBytes( MessagePackCode.Str32, unchecked(( uint )bytesLength) );
		}

#if !FEATURE_POINTER_CONVERSION
		private void WriteStringBody( string value )
		{
			var chars = BufferManager.NewCharBuffer( value.Length );
			int offset = 0;

			while ( offset < value.Length )
			{
				int copying = Math.Min( value.Length - offset, chars.Length );
				value.CopyTo( offset, chars, 0, copying );
				this.WriteStringBody( chars, copying );
				offset += copying;
			}
		}

		private void WriteStringBody( char[] value, int remainingCharsLength )
		{
			var charsOffset = 0;
#else
		private unsafe void WriteStringBody( string value )
		{
			fixed ( char* pValue = value )
#endif // !FEATURE_POINTER_CONVERSION
			{
				var currentBuffer = this._currentBuffer;
				var currentBufferOffset = this._currentBufferOffset;
				var currentBufferLimit = this._currentBufferLimit;
				var currentBufferIndex = this._currentBufferIndex;
				var encoder = Encoding.UTF8.GetEncoder();
#if FEATURE_POINTER_CONVERSION
				var pChars = pValue;
				var remainingCharsLength = value.Length;
#endif // FEATURE_POINTER_CONVERSION
				var isCompleted = false;
				do
				{
					if ( !this.ShiftBufferIfNeeded( remainingCharsLength * sizeof( char ), ref currentBuffer, ref currentBufferOffset, ref currentBufferLimit, ref currentBufferIndex ) )
					{
						this.ThrowEofExceptionForString( ( value.Length - remainingCharsLength ) * sizeof( char ) );
					}

					int charsUsed, bytesUsed;
#if FEATURE_POINTER_CONVERSION
					fixed ( byte* pBuffer = currentBuffer )
#endif // FEATURE_POINTER_CONVERSION
					{
#if FEATURE_POINTER_CONVERSION
						isCompleted = encoder.EncodeString( pChars, remainingCharsLength, pBuffer + currentBufferOffset, currentBufferLimit - currentBufferOffset, out charsUsed, out bytesUsed );
#else
						isCompleted = encoder.EncodeString( value, charsOffset, remainingCharsLength, currentBuffer, currentBufferOffset, currentBufferLimit - currentBufferOffset, out charsUsed, out bytesUsed );
#endif // FEATURE_POINTER_CONVERSION
					}

#if FEATURE_POINTER_CONVERSION
					pChars += charsUsed;
#else
					charsOffset += charsUsed;
#endif // FEATURE_POINTER_CONVERSION
					remainingCharsLength -= charsUsed;
					currentBufferOffset += bytesUsed;
				} while ( remainingCharsLength > 0 );
#if DEBUG
				Contract.Assert( isCompleted, "Encoding is not completed!" );
#endif // DEBUG

				this._currentBufferIndex = currentBufferIndex;
				this._currentBuffer = currentBuffer;
				this._currentBufferOffset = currentBufferOffset;
				this._currentBufferLimit = currentBufferLimit;
			}
		}
	}
}
<#+
private string ToBitsType( string type )
{
	switch ( type )
	{
		case "float":
		{
			return "int";
		}
		case "double":
		{
			return "long";
		}
		default:
		{
			return type;
		}
	}
}
#>