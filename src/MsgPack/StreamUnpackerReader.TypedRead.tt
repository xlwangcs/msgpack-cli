<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file=".\UnpackerReader.TypedRead.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if CORE_CLR || UNITY || NETSTANDARD1_1
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // CORE_CLR || UNITY || NETSTANDARD1_1
using System.IO;
using System.Text;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from StreamUnpackerReader.TypedRead.tt and UnpackerReader.TypedRead.ttinclude T4Template.
	// Do not modify this file. Edit StreamUnpackerReader.TypedRead.tt and UnpackerReader.TypedRead.ttinclude instead.

	partial class StreamUnpackerReader
	{
<#
foreach ( var type in scalarTypes )
{
#>

		public override <#= type #> Read<#= type #>()
		{
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>
			var read = this.TryRead<#= type #>();
			if ( read < 0 )
			{
				this.ThrowEofException( sizeof( <#= primitiveNames[ type ] #> ) );
			}

			return unchecked( ( <#= primitiveNames[ type ] #> )( read ) );
<#
	}
	else
	{
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */true, /* isAsync */false );
	}
#>
		}
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>

		public override <#= lengthTypes[ type ] #> TryRead<#= type #>()
		{
<#
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */false, /* isAsync */false );
#>
		}
<#
	}
} // foreach

this.WriteRead( /* isAsync */false );
this.WriteReadString( /* isAsync */false );
this.WriteDrain( /* isAsync */false );
#>

#if FEATURE_TAP
<#
foreach ( var type in scalarTypes )
{
#>

		public override async Task<<#= type #>> Read<#= type #>Async( CancellationToken cancellationToken )
		{
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>
			var read = await this.TryRead<#= type #>Async( cancellationToken ).ConfigureAwait( false );
			if ( read < 0 )
			{
				this.ThrowEofException( sizeof( <#= primitiveNames[ type ] #> ) );
			}

			return unchecked( ( <#= primitiveNames[ type ] #> )( read ) );
<#
	}
	else
	{
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */true, /* isAsync */true );
	}
#>
		}
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>

		public override async Task<<#= lengthTypes[ type ] #>> TryRead<#= type #>Async( CancellationToken cancellationToken )
		{
<#
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */false, /* isAsync */true );
#>
		}
<#
	}
}// foreach

this.WriteRead( /* isAsync */true );
this.WriteReadString( /* isAsync */true );
this.WriteDrain( /* isAsync */true );
#>

#endif // FEATURE_TAP
	}
}
<#+
private void WriteStreamReaderReadBody( string type, string primitiveType, bool isStrict, bool isAsync )
{
	var isByteRead = primitiveType == "byte";
	var methodCall = new StringBuilder();
	if ( isAsync )
	{
		methodCall.Append( "await ");
	}

	methodCall.Append( "this._source.Read" );

	if ( isAsync )
	{
		methodCall.Append( "Async");
	}

	if ( isByteRead )
	{
		methodCall.Append( "( this._scalarBuffer, 0, sizeof( " ).Append( primitiveType ).Append( " )" );
	}
	else
	{
		methodCall.Append( "( this._scalarBuffer, totalRead, sizeof( " ).Append( primitiveType ).Append( " ) - totalRead" );
	}

	if ( isAsync )
	{
		methodCall.Append( ", cancellationToken");
	}

	methodCall.Append( " )" );

	if ( isAsync )
	{
		methodCall.Append( ".ConfigureAwait( false )");
	}

	if ( isByteRead )
	{
		// optimization for read byte -- it is frequently called for header parsing.
#>
			var read = <#= methodCall #>;
			this._offset += read;
			if ( read > 0 )
			{
				return this._scalarBuffer[ 0 ];
			}
		
<#+
		if ( isStrict )
		{
#>
			this.ThrowEofException( sizeof( <#= primitiveType #> ) );
			// never reaches
			return default( <#= primitiveType #> );
<#+
		}
		else
		{
#>
			return -1;
<#+
		}
	}
	else
	{
#>
			this._lastOffset = this._offset;
			var totalRead = 0;
			var read = 0;
			// Retry for splitted stream like NetworkStream
			do
			{
				read = <#= methodCall #>;
				totalRead += read;
			} while ( read > 0 && totalRead < sizeof( <#= primitiveType #> ) );

			this._offset += totalRead;
			
			if ( totalRead == sizeof( <#= primitiveType #> ) )
			{
				return BigEndianBinary.To<#= type #>( this._scalarBuffer, 0 );
			}
			else
			{
<#+
		if ( isStrict )
		{
#>
				this.ThrowEofException( sizeof( <#= primitiveType #> ) );
				// never reaches
				return default( <#= primitiveType #> );
<#+
		}
		else
		{
#>
				return -1;
<#+
		}
#>
			}
<#+
	} // if primitiveType == "byte"
} // WriteStreamReaderReadBody

private void WriteRead( bool isAsync )
{
#>

		// TODO: Use Span<T>
		public override <#= isAsync ? "async Task" : "void" #> Read<#= isAsync ? "Async" : String.Empty #>( byte[] buffer, int size<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
#if DEBUG
			if ( this._source.CanSeek )
			{
				Contract.Assert( this._source.Position == this._offset, this._source.Position + "==" + this._offset );
			}
#endif // DEBUG

			// Reading 0 byte from stream causes exception in some implementation (issue #60, reported from @odyth).
			if ( size == 0 )
			{
				return;
			}

			this._lastOffset = this._offset;
			var remaining = size;
			var offset = 0;
			int read;

			do
			{
<#+
	if ( !isAsync )
	{
#>
				read = this._source.Read( buffer, offset, remaining );
<#+
	}
	else
	{
#>
				read = await this._source.ReadAsync( buffer, offset, remaining, cancellationToken ).ConfigureAwait( false );
<#+
	}
#>
				remaining -= read;
				offset += read;
			} while ( read > 0 && remaining > 0 );

			this._offset += offset;
#if DEBUG
			if ( this._source.CanSeek )
			{
				Contract.Assert( this._source.Position == this._offset, this._source.Position + "==" + this._offset );
			}
#endif // DEBUG

			if ( offset < size )
			{
				this.ThrowEofException( size );
			}
		}
<#+
} // WriteRead


private void WriteReadString( bool isAsync )
{
#>

		public override <#= isAsync ? "async Task<string>" : "string" #> ReadString<#= isAsync ? "Async" : String.Empty #>( int length<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
			// Reading 0 byte from stream causes exception in some implementation (issue #60, reported from @odyth).
			if ( length == 0 )
			{
				return String.Empty;
			}

			var bytes = BufferManager.NewByteBuffer( length );

			if ( length <= bytes.Length )
			{
<#+
	if ( !isAsync )
	{
#>
				this.Read( bytes, length );
<#+
	}
	else
	{
#>
				await this.ReadAsync( bytes, length, cancellationToken ).ConfigureAwait( false );
<#+
	}
#>
				return Encoding.UTF8.GetString( bytes, 0, length );
			}

			var decoder = Encoding.UTF8.GetDecoder();
			var chars = BufferManager.NewCharBuffer( bytes.Length );
			var stringBuffer = new StringBuilder( length );
			var remaining = length;
			bool isCompleted;
			do
			{
				var reading = Math.Min( remaining, bytes.Length );
				this._lastOffset = this._offset;
<#+
	if ( !isAsync )
	{
#>
				var bytesRead = this._source.Read( bytes, 0, reading );
<#+
	}
	else
	{
#>
				var bytesRead = await this._source.ReadAsync( bytes, 0, reading, cancellationToken ).ConfigureAwait( false );
<#+
	}
#>
				this._offset += bytesRead;
				if ( bytesRead == 0 )
				{
					this.ThrowEofException( reading );
				}

				isCompleted = decoder.DecodeString( bytes, 0, bytesRead, chars, stringBuffer );
				remaining -= bytesRead;
			} while ( remaining > 0 );

			if ( !isCompleted )
			{
				this.ThrowBadUtf8Exception();
			}

			return stringBuffer.ToString();
		}
<#+
}

private void WriteDrain( bool isAsync )
{
#>

		public override <#= isAsync ? "async Task<bool>" : "bool" #> Drain<#= isAsync ? "Async" : String.Empty #>( uint size<#= isAsync ? ", CancellationToken cancellationToken" : String.Empty #> )
		{
			// Reading 0 byte from stream causes exception in some implementation (issue #60, reported from @odyth).
			if ( size == 0 )
			{
				return true;
			}

			if ( this._useStreamPosition )
			{
				var remaining = this._source.Length - this._source.Position;
				if ( remaining >= size )
				{
					this._source.Position += size;
					this._offset += size;
					return true;
				}
				else
				{
					return false;
				}
			}
			else
			{
				var dummyBufferForSkipping = BufferManager.NewByteBuffer( unchecked(( int )Math.Min( size, Int32.MaxValue )) );
				long remaining = size;
				while ( remaining > 0 )
				{
					var reading = unchecked( ( int )Math.Min( remaining, dummyBufferForSkipping.Length ) );
					this._lastOffset = this._offset;
<#+
	if ( !isAsync )
	{
#>
					var lastRead = this._source.Read( dummyBufferForSkipping, 0, reading );
<#+
	}
	else
	{
#>
					var lastRead = await this._source.ReadAsync( dummyBufferForSkipping, 0, reading, cancellationToken ).ConfigureAwait( false );
<#+
	}
#>
					this._offset += lastRead;
					remaining -= lastRead;
					if ( lastRead == 0 )
					{
						return false;
					}
				}

				return true;
			}
		}
<#+
}
#>