<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Globalization" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.IO;
using System.Threading.Tasks;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from UnpackerTest.Skip.tt T4Template.
	// Do not modify this file. Edit UnpackerTest.Skip.tt instead.

	// ReSharper disable once InconsistentNaming
	partial class UnpackerTest
	{
<#
foreach( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}
#>
		[Test]
		public <#= Test( isAsync ) #>_Empty_Null()
		{
			if ( this.CanReadFromEmptySource )
			{
				using ( var buffer = new MemoryStream( new byte[ 0 ] ) )
				using ( var target = this.CreateUnpacker( buffer ) )
				{
					Assert.That( target.Skip<#= isAsync ? "Async" : String.Empty #>()<#= isAsync ? ".Result" : String.Empty #>, Is.Null );
				}
			}
			else
			{
				using ( var buffer = new MemoryStream( new byte[ 0 ] ) )
				{
					Assert.Throws<ArgumentException>(
						() => this.CreateUnpacker( buffer )
					);
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_FixNum_1()
		{
			using ( var stream = new MemoryStream( new byte[] { 1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_Scalar_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xD2, 0x1, 0x2, 0x3, 0x4 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_ContinuousScalar_ReportedSeparately()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xD2, 0x1, 0x2, 0x3, 0x4, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 5L ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1L ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_RawEmpty_0()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xA0 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_FixRaw_1()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xA1, ( byte )'A' } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_Raw_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xDB, 0x0, 0x0, 0x0, 0x1, ( byte )'A' } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_ContinuousRaw_ReportedSeparately()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xA2, ( byte )'A', ( byte )'B', 0xA2, ( byte )'C', ( byte )'D' } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 3L ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 3L ) );
			}
		}


		[Test]
		public <#= AsyncTest( isAsync ) #>_FixArrayEmpty_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x90 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_FixArrayFixNum_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x1, 0x2 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_ArrayEmpty_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xDD, 0x0, 0x0, 0x0, 0x0 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_ArrayScalar_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xDD, 0x0, 0x0, 0x0, 0x2, 0xD2, 0x1, 0x2, 0x3, 0x4, 0xD2, 0x1, 0x2, 0x3, 0x4 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_CotinuousArray_ReportsSeparately()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x1, 0x2, 0x91, 0x3 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 3L ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 2L ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_NestedArray_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x91, 0x1, 0x91, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_NestedArrayContainsEmpty_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x90, 0x91, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}


		[Test]
		public <#= AsyncTest( isAsync ) #>_FixMapEmpty_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x80 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_FixMapFixNum_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x1, 0x2, 0x2 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_MapEmpty_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xDF, 0x0, 0x0, 0x0, 0x0 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_MapScalar_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0xDE, 0x0, 0x2, 0xD0, 0x1, 0xD0, 0x1, 0xD0, 0x2, 0xD0, 0x2 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}
		
		[Test]
		public <#= AsyncTest( isAsync ) #>_CotinuousMap_ReportsSeparately()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x1, 0x2, 0x2, 0x81, 0x3, 0x3 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 5L ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 3L ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_NestedMap_AsIs()
		{
			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x81, 0x2, 0x2, 0x3, 0x81, 0x4, 0x4 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_SubtreeReader_NestedMapContainsEmpty_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x80, 0x2, 0x81, 0x3, 0x3 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( stream.Length ) );
			}
		}


		[Test]
		public <#= AsyncTest( isAsync ) #>_SubtreeReader_NestedArray_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x91, 0x1, 0x91, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}

				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_SubtreeReader_NestedArrayContainsEmpty_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x92, 0x90, 0x91, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 0 ) );
				}

				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_BetweenSubtreeReader_NestedArray_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x93, 0x91, 0x1, 0x2, 0x91, 0x1 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}

				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_SubtreeReader_NestedMap_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x81, 0x2, 0x2, 0x3, 0x81, 0x4, 0x4 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.IsMapHeader );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.LastReadData.Equals( 0x1 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}

				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.LastReadData.Equals( 0x3 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_NestedMapContainsEmpty_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x82, 0x1, 0x80, 0x2, 0x81, 0x3, 0x3 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.IsMapHeader );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.LastReadData.Equals( 0x1 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 0 ) );
				}

				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( target.LastReadData.Equals( 0x2 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

		[Test]
		public <#= AsyncTest( isAsync ) #>_BetweenSubtreeReader_NestedMap_AsIs()
		{
			this.VerifyCanTestSubtree();

			using ( var stream = new MemoryStream( new byte[] { 0x83, 0x1, 0x81, 0x2, 0x2, 0x3, 0x3, 0x4, 0x81, 0x4, 0x4 } ) )
			using ( var target = this.CreateUnpacker( stream ) )
			{
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}

				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1 ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1 ) );
				Assert.That( <#= AwaitSkip( "target", isAsync ) #>(), Is.EqualTo( 1 ) );
				Assert.That( <#= AwaitRead( "target", isAsync ) #>() );

				using ( var subTreeReader = target.ReadSubtree() )
				{
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
					Assert.That( <#= AwaitSkip( "subTreeReader", isAsync ) #>(), Is.EqualTo( 1 ) );
				}
			}
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP

<#
	}
}
#>
	}

	// TODO: NLiblet
	internal static class StreamExtensions
	{
		public static void Write( this Stream source, byte[] buffer )
		{
			if ( source == null )
			{
				throw new ArgumentNullException( "source" );
			}

			if ( buffer == null )
			{
				throw new ArgumentNullException( "buffer" );
			}

			source.Write( buffer, 0, buffer.Length );
		}

		public static void Feed( this Stream source, byte[] buffer )
		{
			if ( source == null )
			{
				throw new ArgumentNullException( "source" );
			}

			if ( buffer == null )
			{
				throw new ArgumentNullException( "buffer" );
			}

			if ( !source.CanSeek )
			{
				throw new NotSupportedException();
			}

			source.Write( buffer, 0, buffer.Length );
			source.Position -= buffer.Length;
		}

		public static void Feed( this Stream source, byte value )
		{
			if ( source == null )
			{
				throw new ArgumentNullException( "source" );
			}

			if ( !source.CanSeek )
			{
				throw new NotSupportedException();
			}

			source.WriteByte( value );
			source.Position--;
		}
	}
}
<#+

private static string AsyncTest( bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0} TestSkip{1}",
			isAsync ? "async Task" : "void",
			isAsync ? "Async" : String.Empty
		);
}

private static string Test( bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"void TestSkip{0}",
			isAsync ? "Async" : String.Empty
		);
}

private static string AwaitRead( string target, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}{1}.Read{2}",
			isAsync ? "await " : String.Empty,
			target,
			isAsync ? "Async" : String.Empty
		);
}

private static string AwaitSkip( string target, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}{1}.Skip{2}",
			isAsync ? "await " : String.Empty,
			target,
			isAsync ? "Async" : String.Empty
		);
}

private static string AsyncLambdaTest( string method, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"void Test{0}{1}",
			method,
			isAsync ? "Async" : String.Empty
		);
}

private static string AsyncLambda( string expressionBody, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}() => {1}{2}{3}",
			isAsync ? "async " : String.Empty,
			isAsync ? "await " : String.Empty,
			expressionBody,
			isAsync ? "Async" : String.Empty
		);
}
#>