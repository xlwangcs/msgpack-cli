<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from PackerTest.PackExtendedType.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit PackerTest.PackExtendedType.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class PackerTest
	{
<#
foreach( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}

	foreach( var testCase in
		new []
		{
			// Length, Header
			Tuple.Create( 0, new byte[]{ 0xC7, 0, 1 } ),
			Tuple.Create( 1, new byte[]{ 0xD4, 1 } ),
			Tuple.Create( 2, new byte[]{ 0xD5, 1 } ),
			Tuple.Create( 3, new byte[]{ 0xC7, 3, 1 } ),
			Tuple.Create( 4, new byte[]{ 0xD6, 1 } ),
			Tuple.Create( 5, new byte[]{ 0xC7, 5, 1 } ),
			Tuple.Create( 8, new byte[]{ 0xD7, 1 } ),
			Tuple.Create( 9, new byte[]{ 0xC7, 9, 1 } ),
			Tuple.Create( 16, new byte[]{ 0xD8, 1 } ),
			Tuple.Create( 17, new byte[]{ 0xC7, 17, 1 } ),
			Tuple.Create( 0xFF, new byte[]{ 0xC7, 0xFF, 1 } ),
			Tuple.Create( 0x100, new byte[]{ 0xC8, 1, 0, 1 } ),
			Tuple.Create( 0xFFFF, new byte[]{ 0xC8, 0xFF, 0xFF, 1 } ),
			Tuple.Create( 0x10000, new byte[]{ 0xC9, 0, 1, 0, 0, 1 } ),
		}
	)
	{
#>
		[Test]
		public <#= AsyncTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Object_Length<#= testCase.Item1 #>()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				var body = Enumerable.Range( 1, <#= testCase.Item1 #> ).Select( i => ( byte )( i % Byte.MaxValue ) ).ToArray();
				<#= Await( "packer.PackExtendedTypeValue", isAsync ) #>( new MessagePackExtendedTypeObject( 1, body ) );
				var packed = this.GetResult( packer );
				Assert.That(
					packed.Take( <#= testCase.Item2.Length #> ).ToArray(),
					Is.EqualTo( new byte[] { <#= String.Join( ", ", testCase.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } )
				);
				Assert.That(
					packed.Skip( <#= testCase.Item2.Length #> ).ToArray(),
					Is.EqualTo( body )
				);
			}
		}
		
		[Test]
		public <#= AsyncLambdaTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Object_Length<#= testCase.Item1 #>_WithCompatibilityOption()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer, PackerCompatibilityOptions.ProhibitExtendedTypeObjects ) )
			{
				var body = Enumerable.Range( 1, <#= testCase.Item1 #> ).Select( i => ( byte )( i % Byte.MaxValue ) ).ToArray();
				<#= Throws( isAsync ) #><InvalidOperationException>( <#= AsyncLambda( "packer.PackExtendedTypeValue", isAsync ) #>( new MessagePackExtendedTypeObject( 1, body ) ) );
			}
		}

		[Test]
		public <#= AsyncTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Primitives_Length<#= testCase.Item1 #>()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				var body = Enumerable.Range( 1, <#= testCase.Item1 #> ).Select( i => ( byte )( i % Byte.MaxValue ) ).ToArray();
				<#= Await( "packer.PackExtendedTypeValue", isAsync ) #>( 1, body );
				var packed = this.GetResult( packer );
				Assert.That(
					packed.Take( <#= testCase.Item2.Length #> ).ToArray(),
					Is.EqualTo( new byte[] { <#= String.Join( ", ", testCase.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } )
				);
				Assert.That(
					packed.Skip( <#= testCase.Item2.Length #> ).ToArray(),
					Is.EqualTo( body )
				);
			}
		}
		
		[Test]
		public <#= AsyncLambdaTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Primitives_Length<#= testCase.Item1 #>_WithCompatibilityOption()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer, PackerCompatibilityOptions.ProhibitExtendedTypeObjects ) )
			{
				var body = Enumerable.Range( 1, <#= testCase.Item1 #> ).Select( i => ( byte )( i % Byte.MaxValue ) ).ToArray();
				<#= Throws( isAsync ) #><InvalidOperationException>( <#= AsyncLambda( "packer.PackExtendedTypeValue", isAsync ) #>( 1, body ) );
			}
		}
<#
	} // foreach( var testCase
#>
		
		[Test]
		public <#= AsyncLambdaTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Primitives_Null_ByteArray()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer ) )
			{
				<#= Throws( isAsync ) #><ArgumentNullException>( <#= AsyncLambda( "packer.PackExtendedTypeValue", isAsync ) #>( 1, null ) );
			}
		}
		
		[Test]
		public <#= AsyncLambdaTest( "PackExtendedTypeValue", isAsync ) #>_ExtendedTypeObject_Object_Invalid()
		{
			using( var buffer = new MemoryStream() )
			using( var packer = CreatePacker( buffer ) )
			{
				<#= Throws( isAsync ) #><ArgumentException>( <#= AsyncLambda( "packer.PackExtendedTypeValue", isAsync ) #>( default( MessagePackExtendedTypeObject ) ) );
			}
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP

<#
	}
} // foreach( var isAsync
#>
	}
}
<#+
private static string AsyncTest( string method, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0} Test{1}{2}",
			isAsync ? "async Task" : "void",
			method,
			isAsync ? "Async" : String.Empty
		);
}

private static string Await( string expression, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}{1}{2}",
			isAsync ? "await " : String.Empty,
			expression,
			isAsync ? "Async" : String.Empty
		);
}

private static string AsyncLambdaTest( string method, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"void Test{0}{1}",
			method,
			isAsync ? "Async" : String.Empty
		);
}

private static string Throws( bool isAsync )
{
	return isAsync ? "AssertEx.ThrowsAsync" : "Assert.Throws";
}

private static string AsyncLambda( string expressionBody, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}() => {1}{2}{3}",
			isAsync ? "async " : String.Empty,
			isAsync ? "await " : String.Empty,
			expressionBody,
			isAsync ? "Async" : String.Empty
		);
}
#>