<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from PackerTest.PackBinary.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit PackerTest.PackBinary.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class PackerTest
	{
<#
// Str
foreach( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}

	foreach( var testType in
		new []
		{
			// Type, Label, Desktop Only
			Tuple.Create( "IEnumerable<char>", "EnumerableOfChar", false ),
			Tuple.Create( "string", "String", true )
		}
	)
	{
		if ( !testType.Item3 )
		{
#>
#if !NETFX_CORE
<#
		}

		foreach( var length in
			Enumerable.Range( 0, 32 ).Select( length => Tuple.Create( length, new byte[]{ ( byte )( 0xA0 + length ) }, default( byte[] ) ) )
			.Concat( 
				new []
				{
					// Length, Header, Compat Header
					Tuple.Create( 32, new byte[]{ 0xD9, 0x20 }, new byte[]{ 0xDA, 0, 0x20 } ),
					Tuple.Create( 0xFF, new byte[]{ 0xD9, 0xFF }, new byte[]{ 0xDA, 0, 0xFF } ),
					Tuple.Create( 0x100, new byte[]{ 0xDA, 1, 0 }, default( byte[] ) ),
					Tuple.Create( 0xFFFF, new byte[]{ 0xDA, 0xFF, 0xFF }, default( byte[] ) ),
					Tuple.Create( 0x10000, new byte[]{ 0xDB, 0, 1, 0, 0 }, default( byte[] ) ),
				}
			)
		)
		{
#>

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsStrStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackString", isAsync )#>( new String( 'A', <#= length.Item1 #> ) as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item2.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item2.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )'A', <#= length.Item1 #> ).ToArray() )
				);
			}
		}
<#
			if( testType.Item2 == "string" )
			{
				// Only once.
#>

		[Test]
		public <#= AsyncTest( "PackStringHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsStrStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackStringHeader", isAsync )#>( <#= length.Item1 #> ) );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
		
<#
			}

			if( length.Item3 != null )
			{
#>

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackString", isAsync )#>( new String( 'A', <#= length.Item1 #> ) as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item3.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item3.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )'A', <#= length.Item1 #> ).ToArray() )
				);
			}
		}
		
		[Test]
		public <#= AsyncTest( "PackStringHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackStringHeader", isAsync ) #>( <#= length.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed,
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
<#
			}
		}

		if ( !testType.Item3 )
		{
#>
#endif // !NETFX_CORE
<#
		}
	} // foreach( var testType
#>

<#
	// Bin
	foreach( var testType in
		new []
		{
			// Type, Label
			Tuple.Create( "IEnumerable<byte>", "UncountableEnumerableOfByte", false ),
			Tuple.Create( "IEnumerable<byte>", "EnumerableOfByte", true ),
			Tuple.Create( "IList<byte>", "ListOfByte", true ),
			Tuple.Create( "byte[]", "ByteArray", true )
		}
	)
	{
		foreach( var length in
			new []
			{
				// Length, Bin Header, Compat Header, RawHeader
				Tuple.Create( 0, new byte[]{ 0xC4, 0 }, new byte[]{ 0xA0 }, new byte[]{ 0xA0 } ),
				Tuple.Create( 1, new byte[]{ 0xC4, 1 }, new byte[]{ 0xA1 }, new byte[]{ 0xA1 } ),
				Tuple.Create( 31, new byte[]{ 0xC4, 0x1F }, new byte[]{ 0xBF }, new byte[]{ 0xBF } ),
				Tuple.Create( 32, new byte[]{ 0xC4, 0x20 }, new byte[]{ 0xDA, 0, 0x20 }, new byte[]{ 0xD9, 0x20 } ),
				Tuple.Create( 0xFF, new byte[]{ 0xC4, 0xFF }, new byte[]{ 0xDA, 0, 0xFF }, new byte[]{ 0xD9, 0xFF } ),
				Tuple.Create( 0x100, new byte[]{ 0xC5, 1, 0 }, new byte[]{ 0xDA, 1, 0 }, new byte[]{ 0xDA, 1, 0 } ),
				Tuple.Create( 0xFFFF, new byte[]{ 0xC5, 0xFF, 0xFF }, new byte[]{ 0xDA, 0xFF, 0xFF }, new byte[]{ 0xDA, 0xFF, 0xFF } ),
				Tuple.Create( 0x10000, new byte[]{ 0xC6, 0, 1, 0, 0 }, new byte[]{ 0xDB, 0, 1, 0, 0 }, new byte[]{ 0xDB, 0, 1, 0, 0 } ),
			}
		)
		{
#>

		[Test]
		public <#= AsyncTest( "PackRaw", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsStrStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackRaw", isAsync )#>( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> )<#= testType.Item3 ? ".ToArray()" : String.Empty #> as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item4.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item4.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item4.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> ).ToArray() )
				);
			}
		}
		
		[Test]
		public <#= AsyncTest( "PackRaw", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackRaw", isAsync )#>( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> )<#= testType.Item3 ? ".ToArray()" : String.Empty #> as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item3.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item3.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> ).ToArray() )
				);
			}
		}


		[Test]
		public <#= AsyncTest( "PackBinary", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsBinStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackBinary", isAsync ) #>( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> )<#= testType.Item3 ? ".ToArray()" : String.Empty #> as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item2.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item2.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> ).ToArray() )
				);
			}
		}
		
		[Test]
		public <#= AsyncTest( "PackBinary", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackBinary", isAsync )#>( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> )<#= testType.Item3 ? ".ToArray()" : String.Empty #> as <#= testType.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed.Take( <#= length.Item3.Length #> ).ToArray(), 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
				Assert.That( 
					packed.Skip( <#= length.Item3.Length #> ).ToArray(),
					Is.EqualTo( Enumerable.Repeat( ( byte )0xFF, <#= length.Item1 #> ).ToArray() )
				);
			}
		}		
<#
			if( testType.Item1 == "byte[]" )
			{
				// Only once
#>

#pragma warning disable 0618 
		[Test]
		public <#= AsyncTest( "PackRawHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsStrStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackRawHeader", isAsync ) #>( <#= length.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item4.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
		
		[Test]
		public <#= AsyncTest( "PackRawHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackRawHeader", isAsync ) #>( <#= length.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
#pragma warning restore 0618 

		[Test]
		public <#= AsyncTest( "PackBinaryHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithoutCompatibilityOptions_AsBinStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.None ) )
			{
				<#= Await( "target.PackBinaryHeader", isAsync ) #>( <#= length.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item2.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
		
		[Test]
		public <#= AsyncTest( "PackBinaryHeader", isAsync ) #>_<#= length.Item1 #>_<#= testType.Item2 #>_WithBinaryAsRawCompatibilityOptions_AsRawStream()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer, PackerCompatibilityOptions.PackBinaryAsRaw ) )
			{
				<#= Await( "target.PackBinaryHeader", isAsync ) #>( <#= length.Item1 #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { <#= String.Join( ", ", length.Item3.Select( b => "0x" + b.ToString( "X" ) ) ) #> } ) 
				);
			}
		}
<#
			}
		} // foreach( var length
	} // foreach( var testType
#>

		[Test]
		public <#= AsyncLambdaTest( "PackRawHeader", isAsync ) #>_MinusOne()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
#pragma warning disable 0618
				Assert.<#= Throws( isAsync ) #><ArgumentOutOfRangeException>( <#= AsyncLambda( "target.PackRawHeader", isAsync ) #>( -1 ) );
#pragma warning restore 0618
			}
		}

		[Test]
		public <#= AsyncLambdaTest( "PackStringHeader", isAsync ) #>_MinusOne()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				Assert.<#= Throws( isAsync ) #><ArgumentOutOfRangeException>( <#= AsyncLambda( "target.PackStringHeader", isAsync ) #>( -1 ) );
			}
		}

		[Test]
		public <#= AsyncLambdaTest( "PackBinaryHeader", isAsync ) #>_MinusOne()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				Assert.<#= Throws( isAsync ) #><ArgumentOutOfRangeException>( <#= AsyncLambda( "target.PackBinaryHeader", isAsync ) #>( -1 ) );
			}
		}

<#

	foreach( var testCase in 
		new []
		{
			new { Label = "IList",			Type = "IList<byte>" },
			new { Label = "IEnumerable",	Type = "IEnumerable<byte>" },
			new { Label = "Array",			Type = "byte[]" },
		}
	)
	{
#>
		[Test]
		public <#= AsyncTest( "PackRaw", isAsync ) #>_<#= testCase.Label #>_Null()
		{
			<#= testCase.Type #> value = null;
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackRaw", isAsync ) #>( value );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xC0 } ) 
				);
			}
		}

<#
	} // foreach( var testCase

	foreach( var testCase in 
		new []
		{
			new { Label = "IList",			Type = "IList<byte>",		Value = "new List<byte>{ 1, 2, 3 }",							Empty = "new List<byte>( 0 )" },
			new { Label = "IEnumerable",	Type = "IEnumerable<byte>",	Value = "Enumerable.Range( 1, 3 ).Select( i => ( byte )i )",	Empty = "Enumerable.Empty<byte>()" },
			new { Label = "Array",			Type = "byte[]",			Value = "new byte[] { 1, 2, 3 }",								Empty = "new byte[ 0 ]" },
		}
	)
	{
#>
		[Test]
		public <#= AsyncTest( "PackRawBody", isAsync ) #>_<#= testCase.Label #>_NotNull()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackRawBody", isAsync ) #>( <#= testCase.Value #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 1, 2, 3 } ) 
				);
			}
		}


		[Test]
		public <#= AsyncTest( "PackRawBody", isAsync ) #>_<#= testCase.Label #>_Empty()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackRawBody", isAsync ) #>( <#= testCase.Empty #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[ 0 ] ) 
				);
			}
		}

		[Test]
		public <#= AsyncLambdaTest( "PackRawBody", isAsync ) #>_<#= testCase.Label #>_Null()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				Assert.<#= Throws( isAsync ) #><ArgumentNullException>( <#= AsyncLambda( "target.PackRawBody", isAsync ) #>( default( <#= testCase.Type #> ) ) );
			}
		}
<#
	} // foreach( var testCase

	foreach( var testCase in 
		new []
		{
			new { Label = "IEnumerable",	Type = "IEnumerable<char>", Empty = "new char[ 0 ]",	Value = "new char[] { 'A', 'B', 'C' }" },
			new { Label = "String",			Type = "string",			Empty = "String.Empty",		Value = "\"ABC\"" },
		}
	)
	{
#>
		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_NotNull()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( <#= testCase.Value #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xA3, ( byte )'A', ( byte )'B', ( byte )'C' } ) 
				);
			}
		}

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_Empty()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( <#= testCase.Empty #> );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xA0 } ) 
				);
			}
		}

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_Null()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( null );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xC0 } ) 
				);
			}
		}

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_WithEncoding_NonNull()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( <#= testCase.Value #>, Encoding.Unicode );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xA6, ( byte )'A', 0, ( byte )'B', 0, ( byte )'C', 0 } ) 
				);
			}
		}

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_WithEncoding_Empty()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( <#= testCase.Empty #>, Encoding.Unicode );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xA0 } ) 
				);
			}
		}

		[Test]
		public <#= AsyncTest( "PackString", isAsync ) #>_<#= testCase.Label #>_WithEncoding_Null()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				<#= Await( "target.PackString", isAsync ) #>( null, Encoding.Unicode );
				var packed = this.GetResult( target );
				Assert.That( 
					packed, 
					Is.EqualTo( new byte[] { 0xC0 } ) 
				);
			}
		}

		[Test]
		public <#= AsyncLambdaTest( "PackString", isAsync ) #>_<#= testCase.Label #>_NullEncoding()
		{
			using ( var buffer = new MemoryStream() )
			using ( var target = CreatePacker( buffer ) )
			{
				Assert.<#= Throws( isAsync ) #><ArgumentNullException>( <#= AsyncLambda( "target.PackString", isAsync ) #>( <#= testCase.Value #>, null ) );
			}
		}

<#
	} // foreach( var testCase
#>
<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP

<#
	}

} // foreach( var isAsync
#>
	}
}
<#+
private static string AsyncTest( string method, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0} Test{1}{2}",
			isAsync ? "async Task" : "void",
			method,
			isAsync ? "Async" : String.Empty
		);
}

private static string Await( string expression, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}{1}{2}",
			isAsync ? "await " : String.Empty,
			expression,
			isAsync ? "Async" : String.Empty
		);
}

private static string AsyncLambdaTest( string method, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"void Test{0}{1}",
			method,
			isAsync ? "Async" : String.Empty
		);
}

private static string Throws( bool isAsync )
{
	return isAsync ? "ThrowsAsync" : "Throws";
}

private static string AsyncLambda( string expressionBody, bool isAsync )
{
	return
		String.Format(
			CultureInfo.InvariantCulture,
			"{0}() => {1}{2}{3}",
			isAsync ? "async " : String.Empty,
			isAsync ? "await " : String.Empty,
			expressionBody,
			isAsync ? "Async" : String.Empty
		);
}
#>